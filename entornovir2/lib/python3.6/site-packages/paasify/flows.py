from collections import OrderedDict

from . import utils
from .config import TEMPLATES, IMAGES, registry as default_registry


class BaseFlow:
    """
    Base Flow
    """

    runtime = None
    source_folder = None
    dockerfile_template_file = None
    image_from = None

    def __init__(self, runtime, source_folder, registry):
        """
        Create a WsgiV3Flow object with a runtime config that applies
        to a source_folder

        param runtime: runtime dictionary
        param source_folder: folder to apply the transformations
        """
        self.runtime = runtime
        self.source_folder = source_folder
        self.registry = registry if registry else default_registry

    def run(self):
        """
        Run the complete flow to make the self.source_folder ready to build a Docker Image
        for python3.6
        """
        self.render_runtime_in_dockerfile()

    def get_image(self, version):
        image_version = version if version else self.image_from[1]
        return '{}:{}'.format(self.image_from[0], image_version)

    def render_runtime_in_dockerfile(self):
        """
        Generate a Dockerfile using a Jinja2 template
        """

        # Load Jinja2 template
        j2template = utils.load_j2template(self.dockerfile_template_file)

        # Apply runtime properties to the j2 template to get a Dockerfile
        build = self.runtime.get("build", dict())

        image_version = self.runtime.get('image_version', None)
        template_values = {
            "from_image": f'{self.registry}{self.get_image(image_version)}'
        }

        environment_constants = build.get("environment_constants")
        if environment_constants is not None:
            template_values['environment_constants'] = OrderedDict(sorted(environment_constants.items()))

        copy_dirs = build.get("copy_dirs")
        if copy_dirs is not None:
            template_values['copy_dirs'] = OrderedDict(sorted(copy_dirs.items()))

        pre_install = build.get("pre_install")
        if pre_install is not None:
            template_values["pre_install_packages"] = pre_install.get("install_packages")
            template_values["pre_install_commands"] = pre_install.get("run_commands")

        post_install = build.get("post_install")
        if post_install is not None:
            template_values["post_install_commands"] = post_install.get("run_commands")
            template_values["post_install_remove_packages"] = post_install.get("remove_packages")

        dockerfile_contents = j2template.render(**template_values)

        # Save the docker file
        utils.save_file_to_source(dockerfile_contents, "Dockerfile", self.source_folder)


class AlpinePythonFlow(BaseFlow):
    dockerfile_template_file = TEMPLATES['ALPINE_PYTHON']
    image_from = IMAGES['ALPINE_PYTHON']


class AlpinePythonTensorflowFlow(BaseFlow):
    dockerfile_template_file = TEMPLATES['ALPINE_PYTHON']
    image_from = IMAGES['ALPINE_PYTHON_TENSORFLOW']


class DebianPythonFlow(BaseFlow):
    dockerfile_template_file = TEMPLATES['DEBIAN_PYTHON']
    image_from = IMAGES['DEBIAN_PYTHON']


class DebianPythonLocalFlow(BaseFlow):
    dockerfile_template_file = TEMPLATES['DEBIAN_PYTHON']
    image_from = IMAGES['DEBIAN_PYTHON_LOCAL']


class ApxAppFlow(BaseFlow):
    dockerfile_template_file = TEMPLATES['APX']
    image_from = IMAGES['APX_ONLINE']


class ApxBatchFlow(BaseFlow):
    dockerfile_template_file = TEMPLATES['APX']
    image_from = IMAGES['APX_BATCH']


class ApxORAFlow(BaseFlow):
    dockerfile_template_file = TEMPLATES['APX']
    image_from = IMAGES['APX_ORA']
