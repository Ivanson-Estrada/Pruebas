from pyspark.context import SparkContext


class JvmException(Exception):
    """
    JvmException occurs whenever an anomaly related to JVM interaction occurs
    """
    pass


class JvmArguments:
    """
    JvmArguments class encapsulates the collection of provided arguments
    in the shape of JVM format
    """

    def __init__(self, args):
        """
        Constructor
        :param args: the list of arguments
        """
        self.__py_args = args

    def args(self):
        """
        Get the list of arguments in JVM format
        :return: the list of arguments in JVM formt
        """
        return JvmArguments._to_jvm(self.__py_args)

    @classmethod
    def _to_jvm(cls, args):
        """
        Transform the arguments into jvm format
        """

        if not SparkContext._gateway:
            raise JvmException("No JavaGateway instance has been set")

        jvm_args = SparkContext._gateway.new_array(SparkContext._gateway.jvm.String, len(args))
        for index, arg in enumerate(args):
            jvm_args[index] = arg

        return jvm_args
